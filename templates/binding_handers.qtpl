{% func GenerateBindingHandlers(prefix string, appPath string) %}
{% if len(prefix)>0 %}
package 	{%s prefix%}_handlers

import (
	"{%s appPath %}/game/{%s prefix%}_global"
)   

type handler struct {
	id         uint16
	name       string
	fun        interface{}
	singleMode bool
}

var handlers = []*handler{}


func BindRequestHandlers() {

	for _, handler := range handlers {
		{%s prefix%}_global.GS.BindRequestHandler(handler.id, handler.name, handler.fun, handler.singleMode)
	}
}

func addHandler(id uint16, name string, fun interface{}, singleMode bool) {
	handlers = append(handlers, &handler{id: id, name: name, fun: fun, singleMode: singleMode})
}

{% else %}
package 	handlers

import (
	"{%s appPath %}/game/global"
)   

type handler struct {
	id         uint16
	name       string
	fun        interface{}
	singleMode bool
}

var handlers = []*handler{}


func BindRequestHandlers() {

	for _, handler := range handlers {
		global.GS.BindRequestHandler(handler.id, handler.name, handler.fun, handler.singleMode)
	}
}

func addHandler(id uint16, name string, fun interface{}, singleMode bool) {
	handlers = append(handlers, &handler{id: id, name: name, fun: fun, singleMode: singleMode})
}
{% endif %}



{% endfunc %}