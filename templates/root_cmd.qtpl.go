// This file is automatically generated by qtc from "root_cmd.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line root_cmd.qtpl:1
package templates

//line root_cmd.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line root_cmd.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line root_cmd.qtpl:1
func StreamGenerateRootCmd(qw422016 *qt422016.Writer, cmd string, short string, long string) {
	//line root_cmd.qtpl:1
	qw422016.N().S(`


package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var cfgFile string

// RootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "`)
	//line root_cmd.qtpl:18
	qw422016.E().S(cmd)
	//line root_cmd.qtpl:18
	qw422016.N().S(`",
	Short: "`)
	//line root_cmd.qtpl:19
	qw422016.E().S(short)
	//line root_cmd.qtpl:19
	qw422016.N().S(`",
	Long:  `)
	//line root_cmd.qtpl:19
	qw422016.N().S("`")
	//line root_cmd.qtpl:20
	qw422016.E().S(long)
	//line root_cmd.qtpl:20
	qw422016.N().S(``)
	//line root_cmd.qtpl:20
	qw422016.N().S("`")
	//line root_cmd.qtpl:20
	qw422016.N().S(`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	//	Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	// Here you will define your flags and configuration settings.
	// Cobra supports Persistent Flags, which, if defined here,
	// will be global for your application.

	RootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.torch.yaml)")
	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	RootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")

	RootCmd.AddCommand(serverCmd)
	RootCmd.AddCommand(generatorCmd)

}


// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" { // enable ability to specify config file via flag
		viper.SetConfigFile(cfgFile)
	}

	viper.SetConfigName(".`)
	//line root_cmd.qtpl:59
	qw422016.E().S(cmd)
	//line root_cmd.qtpl:59
	qw422016.N().S(`") // name of config file (without extension)
	viper.AddConfigPath("$HOME")  // adding home directory as first search path
	viper.AutomaticEnv()          // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil {
		fmt.Println("Using config file:", viper.ConfigFileUsed())
	}
}
`)
//line root_cmd.qtpl:68
}

//line root_cmd.qtpl:68
func WriteGenerateRootCmd(qq422016 qtio422016.Writer, cmd string, short string, long string) {
	//line root_cmd.qtpl:68
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line root_cmd.qtpl:68
	StreamGenerateRootCmd(qw422016, cmd, short, long)
	//line root_cmd.qtpl:68
	qt422016.ReleaseWriter(qw422016)
//line root_cmd.qtpl:68
}

//line root_cmd.qtpl:68
func GenerateRootCmd(cmd string, short string, long string) string {
	//line root_cmd.qtpl:68
	qb422016 := qt422016.AcquireByteBuffer()
	//line root_cmd.qtpl:68
	WriteGenerateRootCmd(qb422016, cmd, short, long)
	//line root_cmd.qtpl:68
	qs422016 := string(qb422016.B)
	//line root_cmd.qtpl:68
	qt422016.ReleaseByteBuffer(qb422016)
	//line root_cmd.qtpl:68
	return qs422016
//line root_cmd.qtpl:68
}
