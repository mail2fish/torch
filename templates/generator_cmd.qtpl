{% func GenerateGeneratorCmd(handlersDir string,appPath string,scenesDir string ,prefix string) %}
package cmd

import (
	"fmt"
	"os"
	"path"
	"torch/templates"
   	"sync"
    "os/exec"



	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var generatorCmd = &cobra.Command{
	Use:   "generate [handler, scene, pbgo]",
	Short: "Generate handler, scene or protobuf's go file.",
	Long:  `Generator`,

	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			fmt.Println("Could not found a command for generator. \n The command is handler, scene, pbgo")
			os.Exit(1)
		}
		if len(args) > 1 {
			doCmd(args[0], args[1:])
		} else {
			doCmd(args[0], nil)
		}

	},
}

func doCmd(cmd string, args []string) {


	gopath := viper.Get("gopath").(string)
	gopathSrc := path.Join(gopath,"src")

	appPath := "{%s appPath %}"
    prefix := "{%s prefix %}"

	switch cmd {
	case "handler":
	    if len(args) == 0 {
		    fmt.Println("Could not found the hander name")
		    os.Exit(1)
    	}
        handlerFilename := args[0]
        handlersDir := "{%s handlersDir %}"
        
		fpath := path.Join(gopathSrc, appPath, "game", handlersDir, handlerFilename+"_handler.go")

		writeToFile(fpath, 
            func(f *os.File) { 
                templates.WriteGenerateExampleHandler(f, prefix, appPath, strings.Title(handlerFilename)) }, 0644)
    case "pbgo":
        pstructsDir := "pstructs"
        if len(prefix) > 0 {
            pstructsDir = fmt.Sprintf("%s_%s", prefix, pstructsDir)
        }
        protobufDir :=path.Join(gopathSrc, appPath, "protobuf")
        generateProtobufGoFiles(path.Join(gopathSrc, appPath, "game", pstructsDir), protobufDir)

    case "scene":
    	if len(args) == 0 {
		    fmt.Println("Could not found the scene name")
		    os.Exit(1)
    	}
        scenesDir:="{%s scenesDir %}"
        fpath := path.Join(gopathSrc, appPath, "game", scenesDir, strings.ToLower(args[0])+"_scene.go")

		writeToFile(fpath, 
            func(f *os.File) { 
                templates.WriteGenerateScene(f,prefix, args[0]) }, 0644)
    case "default":
        fmt.Println("Could not found that command: "+cmd)

	}
}

type templateWrite func(*os.File)

var overwriteFlag string

func writeToFile(fpath string, fun templateWrite, mode os.FileMode) {
		if _, err := os.Stat(fpath); !os.IsNotExist(err) {
			fmt.Println("The file path: ", fpath, " is exist. Do you want to overwrite it? (n/y)")
			if _, err := fmt.Scanf("%s", &overwriteFlag); err != nil {
				fmt.Printf("%s\n", err)
				return
			}

			switch overwriteFlag {
			case "n", "N":
				return

			}
		}

	f, err := os.OpenFile(fpath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, mode)
	defer f.Close()
	if err != nil {
		fmt.Println("Failed to generate the file:", fpath)
	} else {
		fmt.Println("Generate file:", fpath)
		fun(f)
	}

}

func generateProtobufGoFiles(pstructsPath string, protobufPath string) {
	var wg sync.WaitGroup
	fPath := path.Join(protobufPath, "*.proto")
	cmd := fmt.Sprintf("protoc --gofast_out=%s --proto_path=%s %s", pstructsPath, protobufPath, fPath)
	execCmd(cmd, &wg)
	wg.Wait()
}

func execCmd(cmd string, wg *sync.WaitGroup) {
	wg.Add(1)
	fmt.Println("command is ", cmd)

	out, err := exec.Command("sh", "-c", cmd).CombinedOutput()
	if err != nil {
		fmt.Printf("Error: %s\n", err)
	}
	fmt.Printf("%s\n", out)

	wg.Done() // Need to signal to waitgroup that this goroutine is done
}

{% endfunc %}