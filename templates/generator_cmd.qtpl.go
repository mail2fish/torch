// This file is automatically generated by qtc from "generator_cmd.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line generator_cmd.qtpl:1
package templates

//line generator_cmd.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line generator_cmd.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line generator_cmd.qtpl:1
func StreamGenerateGeneratorCmd(qw422016 *qt422016.Writer, handlersDir string, appPath string, scenesDir string, prefix string) {
	//line generator_cmd.qtpl:1
	qw422016.N().S(`
package cmd

import (
	"fmt"
	"os"
	"path"
	"torch/templates"
   	"sync"
    "os/exec"



	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var generatorCmd = &cobra.Command{
	Use:   "generate [handler, scene, pbgo]",
	Short: "Generate handler, scene or protobuf's go file.",
	Long:  `)
	//line generator_cmd.qtpl:1
	qw422016.N().S("`")
	//line generator_cmd.qtpl:1
	qw422016.N().S(`Generator`)
	//line generator_cmd.qtpl:1
	qw422016.N().S("`")
	//line generator_cmd.qtpl:1
	qw422016.N().S(`,

	Run: func(cmd *cobra.Command, args []string) {
		if len(args) == 0 {
			fmt.Println("Could not found a command for generator. \n The command is handler, scene, pbgo")
			os.Exit(1)
		}
		if len(args) > 1 {
			doCmd(args[0], args[1:])
		} else {
			doCmd(args[0], nil)
		}

	},
}

func doCmd(cmd string, args []string) {


	gopath := viper.Get("gopath").(string)
	gopathSrc := path.Join(gopath,"src")

	appPath := "`)
	//line generator_cmd.qtpl:45
	qw422016.E().S(appPath)
	//line generator_cmd.qtpl:45
	qw422016.N().S(`"
    prefix := "`)
	//line generator_cmd.qtpl:46
	qw422016.E().S(prefix)
	//line generator_cmd.qtpl:46
	qw422016.N().S(`"

	switch cmd {
	case "handler":
	    if len(args) == 0 {
		    fmt.Println("Could not found the hander name")
		    os.Exit(1)
    	}
        handlerFilename := args[0]
        handlersDir := "`)
	//line generator_cmd.qtpl:55
	qw422016.E().S(handlersDir)
	//line generator_cmd.qtpl:55
	qw422016.N().S(`"
        
		fpath := path.Join(gopathSrc, appPath, "game", handlersDir, handlerFilename+"_handler.go")

		writeToFile(fpath, 
            func(f *os.File) { 
                templates.WriteGenerateExampleHandler(f, prefix, appPath, strings.Title(handlerFilename)) }, 0644)
    case "pbgo":
        pstructsDir := "pstructs"
        if len(prefix) > 0 {
            pstructsDir = fmt.Sprintf("%s_%s", prefix, pstructsDir)
        }
        protobufDir :=path.Join(gopathSrc, appPath, "protobuf")
        generateProtobufGoFiles(path.Join(gopathSrc, appPath, "game", pstructsDir), protobufDir)

    case "scene":
    	if len(args) == 0 {
		    fmt.Println("Could not found the scene name")
		    os.Exit(1)
    	}
        scenesDir:="`)
	//line generator_cmd.qtpl:75
	qw422016.E().S(scenesDir)
	//line generator_cmd.qtpl:75
	qw422016.N().S(`"
        fpath := path.Join(gopathSrc, appPath, "game", scenesDir, strings.ToLower(args[0])+"_scene.go")

		writeToFile(fpath, 
            func(f *os.File) { 
                templates.WriteGenerateScene(f, args[0]) }, 0644)
    case "default":
        fmt.Println("Could not found that command: "+cmd)

	}
}

type templateWrite func(*os.File)

func writeToFile(fpath string, fun templateWrite, mode os.FileMode) {
	f, err := os.OpenFile(fpath, os.O_RDWR|os.O_CREATE, mode)
	defer f.Close()
	if err != nil {
		fmt.Println("Failed to generate the file:", fpath)
	} else {
		fmt.Println("Generate file:", fpath)
		fun(f)
	}

}

func generateProtobufGoFiles(pstructsPath string, protobufPath string) {
	var wg sync.WaitGroup
	fPath := path.Join(protobufPath, "*.proto")
	cmd := fmt.Sprintf("protoc --gofast_out=%s --proto_path=%s %s", pstructsPath, protobufPath, fPath)
	execCmd(cmd, &wg)
	wg.Wait()
}

func execCmd(cmd string, wg *sync.WaitGroup) {
	wg.Add(1)
	fmt.Println("command is ", cmd)

	out, err := exec.Command("sh", "-c", cmd).CombinedOutput()
	if err != nil {
		fmt.Printf("Error: %s\n", err)
	}
	fmt.Printf("%s\n", out)

	wg.Done() // Need to signal to waitgroup that this goroutine is done
}

`)
//line generator_cmd.qtpl:122
}

//line generator_cmd.qtpl:122
func WriteGenerateGeneratorCmd(qq422016 qtio422016.Writer, handlersDir string, appPath string, scenesDir string, prefix string) {
	//line generator_cmd.qtpl:122
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line generator_cmd.qtpl:122
	StreamGenerateGeneratorCmd(qw422016, handlersDir, appPath, scenesDir, prefix)
	//line generator_cmd.qtpl:122
	qt422016.ReleaseWriter(qw422016)
//line generator_cmd.qtpl:122
}

//line generator_cmd.qtpl:122
func GenerateGeneratorCmd(handlersDir string, appPath string, scenesDir string, prefix string) string {
	//line generator_cmd.qtpl:122
	qb422016 := qt422016.AcquireByteBuffer()
	//line generator_cmd.qtpl:122
	WriteGenerateGeneratorCmd(qb422016, handlersDir, appPath, scenesDir, prefix)
	//line generator_cmd.qtpl:122
	qs422016 := string(qb422016.B)
	//line generator_cmd.qtpl:122
	qt422016.ReleaseByteBuffer(qb422016)
	//line generator_cmd.qtpl:122
	return qs422016
//line generator_cmd.qtpl:122
}
